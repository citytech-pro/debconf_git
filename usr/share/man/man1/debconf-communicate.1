.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "DEBCONF-COMMUNICATE 1"
.TH DEBCONF-COMMUNICATE 1 "2017-05-21" "" "Debconf"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
debconf\-communicate \- communicate with debconf
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& echo commands | debconf\-communicate [options] [package]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBdebconf-communicate\fR allows you to communicate with debconf on the fly,
from the command line. The package argument is the name of the package
which you are pretending to be as you communicate with debconf, and it may
be omitted if you are lazy. It reads commands in the form used by the debconf
protocol from stdin. For documentation on the available commands and their
usage, see the debconf specification.
.PP
The commands are executed in sequence. The textual return code of each is
printed out to standard output.
.PP
The return value of this program is the numeric return code of the last
executed command.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 1
\& echo get debconf/frontend | debconf\-communicate
.Ve
.PP
Print out the value of the debconf/frontend question.
.SH "WARNING"
.IX Header "WARNING"
This program should never be used from a maintainer script of a package
that uses debconf! It may however, be useful in debugging.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIdebconf\-loadtemplate\fR\|(1)
.SH "AUTHOR"
.IX Header "AUTHOR"
Joey Hess <joeyh@debian.org>
