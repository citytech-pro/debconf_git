.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "DEBCONF-COPYDB 1"
.TH DEBCONF-COPYDB 1 "2017-05-21" "" "Debconf"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
debconf\-copydb \- copy a debconf database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& debconf\-copydb sourcedb destdb [\-\-pattern=pattern] [\-\-owner\-pattern=pattern] [\-\-config=Foo:bar]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBdebconf-copydb\fR copies items from an existing debconf database into
another, possibly new database. The two databases may have different
formats; if so a conversion will automatically be done.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fIsourcedb\fR" 4
.IX Item "sourcedb"
The name of the source database. Typically it will be defined
in your debconf.conf (or .debconfrc) file.
.IP "\fIdestdb\fR" 4
.IX Item "destdb"
The name of the destination database. It may be defined in
debconf.conf or .debconfrc, or you might define it on the command line (see
below).
.IP "\fB\-p\fR \fIpattern\fR, \fB\-\-pattern\fR \fIpattern\fR" 4
.IX Item "-p pattern, --pattern pattern"
If this is specified, only items in \fIsourcedb\fR whose names match the pattern
will be copied.
.IP "\fB\-\-owner\-pattern\fR \fIpattern\fR" 4
.IX Item "--owner-pattern pattern"
If this is specified, only items in \fIsourcedb\fR whose owners match the pattern
will be copied.
.IP "\fB\-c\fR \fIfoo:bar\fR, \fB\-\-config\fR \fIFoo:bar\fR" 4
.IX Item "-c foo:bar, --config Foo:bar"
Set option Foo to bar. This is similar to writing:
.Sp
.Vb 1
\&  Foo: bar
.Ve
.Sp
In debconf.conf, except you probably want to leave off the space on the
command line (or quote it: \*(L"Foo: bar\*(R"). Generally must be used multiple
times, to build up a full configuration stanza. While blank lines are used
to separate stanzas in debconf.conf, this program will assume that
\&\*(L"Name:dbname\*(R" denotes the beginning of a new stanza.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\&  debconf\-copydb configdb backup
.Ve
.PP
Copy all of configdb to backup, assuming you already have the backup
database defined in debconf.conf.
.PP
.Vb 3
\&  debconf\-copydb configdb newdb \-\-pattern=\*(Aq^slrn/\*(Aq \e
\&        \-\-config=Name:newdb \-\-config=Driver:File \e
\&        \-\-config=Filename:newdb.dat
.Ve
.PP
Copy slrn's data out of configdb, and into newdb. newdb is not defined in
the rc file, so the \-\-config switches set up the database on the fly.
.PP
.Vb 2
\&  debconf\-copydb configdb stdout \-c Name:stdout \-c Driver:Pipe \e
\&        \-c InFd:none \-\-pattern=\*(Aq^foo/\*(Aq
.Ve
.PP
Spit out all the items in the debconf database related to package foo.
.PP
.Vb 4
\&  debconf\-copydb configdb pipe \-\-config=Name:pipe \e
\&                \-\-config=Driver:Pipe \-\-config=InFd:none | \e
\&        ssh remotehost debconf\-copydb pipe configdb \e
\&                \-\-config=Name:pipe \-\-config=Driver:Pipe
.Ve
.PP
This uses the special purpose pipe driver to copy a database to a remote
system.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIdebconf.conf\fR\|(5)
.SH "AUTHOR"
.IX Header "AUTHOR"
Joey Hess <joeyh@debian.org>
